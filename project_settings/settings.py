"""
Django settings for hyundaiautoever_sideproject project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-o2gjk%1!ba=sij(z4qf*m!#gjc6hk#-%2%24ep3htd!&ul(ux^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'corsheaders', # 이 줄을 추가 (django.contrib.admin 위쪽이 권장됨)
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',   # <-- 이 부분 추가 
    'rest_framework_simplejwt', # <-- 이 줄을 추가합니다.
    'parts_api',        # <-- 이 부분 추가
    'users_api',        # <-- 이 부분 추가
    'djongo', # MongoDB 사용 시
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # 이 줄을 가장 위쪽에 추가하여 연결
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS 설정 추가
CORS_ALLOW_ALL_ORIGINS = False # 모든 Origin 허용은 보안상 좋지 않음
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React 개발 서버 주소 (CRA 기본)
    "http://localhost:5173",  # React 개발 서버 주소 (Vite 기본)
    # 필요한 경우 다른 프런트엔드 주소를 추가
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


ROOT_URLCONF = 'project_settings.urls'  # 새로 만든 폴더 이름으로 변경
WSGI_APPLICATION = 'project_settings.wsgi.application' # 새로 만든 폴더 이름으로 변경

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]




# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': { # 쓰기 전용 MySQL (주 데이터베이스)
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'hyundaimotors_parts_db',  # 이전에 생성한 MySQL 데이터베이스 이름
        'USER': 'django_user',          # 이전에 생성한 MySQL 사용자 이름
        'PASSWORD': 'qwe123', # <-- MySQL 사용자 비밀번호로 반드시 변경하세요!
        'HOST': '127.0.0.1',            # MySQL 서버 IP 주소 (로컬이면 127.0.0.1, Docker 사용 시 컨테이너 IP 또는 서비스 이름)
        'PORT': '3306',                 # MySQL 포트 (기본값)
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    },
    'mongodb': { # 읽기 전용 MongoDB
        'ENGINE': 'djongo',
        'NAME': 'bluemhands_parts_read_db', # 사용할 MongoDB 데이터베이스 이름
        'CLIENT': {
            'host': 'mongodb://localhost:27017/', # MongoDB 서버 주소 (로컬이면 localhost, Docker 사용 시 컨테이너 IP 또는 서비스 이름)
            'username': 'django_read_user', # <-- MongoDB 사용자 이름 (설정했다면)
            'password': '12345', # <-- MongoDB 사용자 비밀번호 (설정했다면)
            'authSource': 'bluemhands_parts_read_db'
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DATABASE_ROUTERS = ['project_settings.db_routers.PrimaryReplicaRouter'] # 새로 만든 폴더 이름으로 변경

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # 액세스 토큰 유효 기간 (짧게 설정하여 테스트 용이)
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),   # 리프레시 토큰 유효 기간
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}